" Indent Guides
let g:indent_guides_color_change_percent = 3
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1

" Syntastic plugin config
let g:syntastic_phpcs_conf="--standard=Avira"
let g:syntastic_auto_loc_list=1
let g:syntastic_mode_map={ 'mode': 'passive' }
let g:syntastic_stl_format='[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_check_on_open=0
let g:syntastic_enable_balloons=1
let g:syntastic_enable_signs=1
let g:syntastic_enable_highlighting=1

" NerdTree
let g:NERDTreeDirArrows=0
let g:NERDTreeShowHidden=1

" NerdTreeTabs
let g:nerdtree_tabs_open_on_console_startup=0

" Vim Airline
let g:airline#extensions#tabline#enabled = 1

" Neo Complete Cache
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#max_list = 20
let g:neocomplete#enable_prefetch = 1
let g:neocomplete#data_directory = '/tmp/.neocomplete'
let g:neocomplete#force_overwrite_completefunc = 1
let g:neocomplete#disable_auto_complete = 1
let g:neocomplete#enable_auto_select = 0
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.ruby =
\ '[^. *\t]\.\w*\|\h\w*::'

if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.cucumber =
\ '\(When\|Then\|Given\|And\)\s.*$'

" For smart TAB completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ neocomplete#start_manual_complete()
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

function! s:check_back_space()
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" I want to complete from all buffers.
 let g:neocomplcache_same_filetype_lists = {}
 let g:neocomplcache_same_filetype_lists._ = '_'

" Vim Ruby
let ruby_operators = 1
let ruby_fold = 1
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

" Unite

" The prefix key.
nnoremap [unite]   <Nop>
nmap , [unite]

" Like ctrlp.vim settings.
call unite#custom#profile('default', 'context', {
      \   'start_insert': 1,
      \   'winheight': 10,
      \   'direction': 'botright',
      \ })

let g:unite_force_overwrite_statusline = 0

call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.git/',
      \ ], '\|'))

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

autocmd FileType unite call s:unite_settings()

function! s:unite_settings()
  let b:SuperTabDisabled=1
  imap <silent><buffer><expr> <C-x> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')

  imap <silent><buffer><expr> <C-p>
        \ empty(filter(range(1, winnr('$')),
        \ 'getwinvar(v:val, "&previewwindow") != 0')) ?
        \ unite#do_action('preview') : ":\<C-u>pclose!\<CR>"

  nnoremap <silent><buffer> <C-j> <Plug>(unite_toggle_auto_preview)
  nmap <buffer> <ESC> <Plug>(unite_exit)
endfunction

" Use ag for search
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column -i'
  let g:unite_source_grep_recursive_opt = ''
"  let g:unite_source_grep_ignore_pattern = 'tags'
endif

let g:unite_source_history_yank_enable = 1

 autocmd BufEnter *
    \   if empty(&buftype)
    \|      nnoremap <buffer> [unite]<C-]> :<C-u>UniteWithCursorWord -immediately tag<CR>
    \|  endif

nnoremap <silent> [unite]/ :Unite grep:.<cr>
nnoremap <silent> [unite]f :<C-u>Unite  -buffer-name=files buffer file_rec/async:!<cr>
nnoremap <silent> [unite]b :<C-u>UniteWithBufferDir  -buffer-name=files buffer file_rec/async:!<cr>
nnoremap <silent> [unite]t :<C-u>Unite  tag<cr>
nnoremap <silent> [unite]y :Unite history/yank<cr>
nnoremap [unite]r :Unite rails/

" Session Save
let g:session_autoload = 'yes'
let g:session_autosave = 'yes'
let g:session_directory= '~/.vim_sessions/'
